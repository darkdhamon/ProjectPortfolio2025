// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model;

#nullable disable

namespace Model.Migrations
{
    [DbContext(typeof(PortfolioContext))]
    [Migration("20250723182500_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("Model.Entity.Certification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("DateAwarded")
                        .HasColumnType("TEXT");

                    b.Property<string>("Issuer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProfileID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("ProfileID");

                    b.ToTable("Certifications");
                });

            modelBuilder.Entity("Model.Entity.EducationRecord", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProfileID")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("ProfileID");

                    b.ToTable("EducationRecords");
                });

            modelBuilder.Entity("Model.Entity.EmploymentRecord", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("EmploymentRecordID")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProfileID")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("EmploymentRecordID");

                    b.HasIndex("ProfileID");

                    b.ToTable("EmploymentRecords");
                });

            modelBuilder.Entity("Model.Entity.Person", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Model.Entity.Profile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PersonId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SelfDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("PersonId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Model.Entity.Project", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("EmploymentRecordID")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProfileID")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("EmploymentRecordID");

                    b.HasIndex("ProfileID");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Model.Entity.Skill", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProjectID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ProjectID");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Model.Entity.Certification", b =>
                {
                    b.HasOne("Model.Entity.Profile", null)
                        .WithMany("Certifications")
                        .HasForeignKey("ProfileID");
                });

            modelBuilder.Entity("Model.Entity.EducationRecord", b =>
                {
                    b.HasOne("Model.Entity.Profile", null)
                        .WithMany("EducationHistory")
                        .HasForeignKey("ProfileID");
                });

            modelBuilder.Entity("Model.Entity.EmploymentRecord", b =>
                {
                    b.HasOne("Model.Entity.EmploymentRecord", null)
                        .WithMany("Clients")
                        .HasForeignKey("EmploymentRecordID");

                    b.HasOne("Model.Entity.Profile", null)
                        .WithMany("EmploymentHistory")
                        .HasForeignKey("ProfileID");
                });

            modelBuilder.Entity("Model.Entity.Profile", b =>
                {
                    b.HasOne("Model.Entity.Person", "Person")
                        .WithMany("Portfolios")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Model.Entity.Project", b =>
                {
                    b.HasOne("Model.Entity.EmploymentRecord", null)
                        .WithMany("Projects")
                        .HasForeignKey("EmploymentRecordID");

                    b.HasOne("Model.Entity.Profile", null)
                        .WithMany("PersonalProjects")
                        .HasForeignKey("ProfileID");
                });

            modelBuilder.Entity("Model.Entity.Skill", b =>
                {
                    b.HasOne("Model.Entity.Project", null)
                        .WithMany("Skills")
                        .HasForeignKey("ProjectID");
                });

            modelBuilder.Entity("Model.Entity.EmploymentRecord", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Model.Entity.Person", b =>
                {
                    b.Navigation("Portfolios");
                });

            modelBuilder.Entity("Model.Entity.Profile", b =>
                {
                    b.Navigation("Certifications");

                    b.Navigation("EducationHistory");

                    b.Navigation("EmploymentHistory");

                    b.Navigation("PersonalProjects");
                });

            modelBuilder.Entity("Model.Entity.Project", b =>
                {
                    b.Navigation("Skills");
                });
#pragma warning restore 612, 618
        }
    }
}
